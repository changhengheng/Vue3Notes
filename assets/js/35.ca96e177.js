(window.webpackJsonp=window.webpackJsonp||[]).push([[35],{458:function(t,e,r){"use strict";r.r(e);var s=r(65),a=Object(s.a)({},(function(){var t=this.$createElement,e=this._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":this.$parent.slotKey}},[e("h1",{attrs:{id:"怎么理解-reactive-的响应式是深层的"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#怎么理解-reactive-的响应式是深层的"}},[this._v("#")]),this._v(" 怎么理解 reactive 的响应式是深层的")]),this._v(" "),e("p",[this._v("reactive 的响应式数据的转换只针对对象类型，而不针对基本类型数据，比如对象的属性。使用 reactive 转换后，深层是指无论嵌套多少层都保证对象本身是响应式的，但是对象的属性不是。比如一个对象嵌套了一个对象，对外层对象使用reactive进行转换形成Proxy对象之后，对其整体进行操作（即使是操作属性）都能保证是响应式的，但是如果使用v-for遍历拿到了其中的属性（内部嵌套的对象），这个属性就不是响应式的了。此时就是使用toRefs的最好时机。")])])}),[],!1,null,null,null);e.default=a.exports}}]);